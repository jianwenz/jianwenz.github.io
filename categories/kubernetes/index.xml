<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Jianwen&#39;s Blog</title>
    <link>https://jianwenz.github.io/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on Jianwen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jul 2018 11:04:16 +0800</lastBuildDate>
    
	<atom:link href="https://jianwenz.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Centos7部署Kubernetes集群</title>
      <link>https://jianwenz.github.io/2018/07/centos7%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 11 Jul 2018 11:04:16 +0800</pubDate>
      
      <guid>https://jianwenz.github.io/2018/07/centos7%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;p&gt;运行Nginx服务和k8s Dashboard&lt;/p&gt;

&lt;p&gt;之前介绍了Kubernetes的架构与核心概念, 现在搭建一个kubernetes集群的环境, 目标是能通过k8s运行Nginx服务和k8s的Dashbord, 借此来进一步理解和熟悉k8s的原理.&lt;/p&gt;

&lt;p&gt;这里我为了方便, 使用境外服务器搭建测试环境.&lt;/p&gt;

&lt;p&gt;由于docker官方镜像仓库在海外, 如果服务器在国内请自行搭建梯子, 否则拉取docker镜像时会失败.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes核心概念</title>
      <link>https://jianwenz.github.io/2018/07/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 10 Jul 2018 11:04:16 +0800</pubDate>
      
      <guid>https://jianwenz.github.io/2018/07/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h3 id=&#34;1-基础架构&#34;&gt;1.基础架构&lt;/h3&gt;

&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;http://media.jianwen.blog/11_1.png&#34; width = 10%&gt;&lt;/div&gt;

&lt;h5 id=&#34;1-1-master&#34;&gt;1.1 Master&lt;/h5&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;Master节点上面主要由四个模块组成：APIServer、scheduler、controller manager、etcd。&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;APIServer&lt;/code&gt;，APIServer负责对外提供RESTful的Kubernetes API服务，它是系统管理指令的统一入口，任何对资源进行增删改查的操作都要交给APIServer处理后再提交给etcd。如架构图中所示，kubectl（Kubernetes提供的客户端工具，该工具内部就是对Kubernetes API的调用）是直接和APIServer交互的。&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;Scheduler&lt;/code&gt;，scheduler的职责很明确，就是负责调度pod到合适的Node上。如果把scheduler看成一个黑匣子，那么它的输入是pod和由多个Node组成的列表，输出是Pod和一个Node的绑定，即将这个pod部署到这个Node上。Kubernetes目前提供了调度算法，但是同样也保留了接口，用户可以根据自己的需求定义自己的调度算法。&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;controller manager&lt;/code&gt;，如果说APIServer做的是“前台”的工作的话，那controller manager就是负责“后台”的。每个资源一般都对应有一个控制器，而controller manager就是负责管理这些控制器的。比如我们通过APIServer创建一个pod，当这个pod创建成功后，APIServer的任务就算完成了。而后面保证Pod的状态始终和我们预期的一样的重任就由controller manager去保证了。&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;etcd&lt;/code&gt;，etcd是一个高可用的键值存储系统，Kubernetes使用它来存储各个资源的状态，从而实现了Restful的API。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>